#!/usr/bin/env python3
'''Gdel
  Delete jobs and optionally copy data from working directory and/or remove it.

Usage:
  Gdel [options]
  Gdel [options] JOBID...

Arguments:
  JOBID         ID-number(s) of the job(s) to delete, or path to the JSON log(s) (see 'Gsub').
                (default: all user's jobs)

Options:
  -c --copy     Copy the data from the temporary directory (only for JSON logs).
  -r --remove   Remove the job's directory (some defaults are tried if the input is not a JSON log).
  -h --help     Show help.
  --version     Show version.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
'''

# --------------------------------------------------------------------------------------------------

import docopt, os, sys, subprocess, csv, pwd, shutil, time, json

# --------------------------------------------------------------------------------------------------

def confirm(message='Proceed [y/n]?\n'):
  while True:
    user = input(message)
    if not user                     : print('Please enter y or n.'); continue
    if user not in ['y','Y','n','N']: print('Please enter y or n.'); continue
    if user     in ['y','Y'        ]: return True
    if user     in ['n','N'        ]: return False

# --------------------------------------------------------------------------------------------------

def getrunningjobs():

  jobs = subprocess.check_output('squeue --user=`whoami` -o "%A|%t"',shell=True).decode('utf-8')
  jobs = [job for job in jobs.split('\n')[1:]]
  jobs = [job for job in jobs if len(job) > 0]
  stat = [job.split('|')[1].strip() for job in jobs]
  jobs = [job.split('|')[0].strip() for job in jobs]

  out = []

  for job,st in zip(jobs,stat):
    if st == 'R':
      out += [job]

  return out

# --------------------------------------------------------------------------------------------------

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.2')

# rename fields
args['jobs'] = args.pop('JOBID')

# --------------------------------------------------------------------------------------------------

# get the user-name
user = pwd.getpwuid(os.getuid())[0]

# get the currently running jobs (restricted to the current user)
running = getrunningjobs()
# default : select all jobs
if args['jobs']: arguments = args['jobs']
else           : arguments = [job for job in running]

# fill job info
# - allocate
jobs = []
# - fill
for job in arguments:
  # -- try some things
  if   os.path.isfile(job):
    data = json.load(open(job,'r'))
  elif os.path.isdir('/scratch/{user:s}/{job:s}'.format(user=user,job=job)):
    data = {'SLURM_JOB_ID':job,'workdir':'/scratch/{user:s}/{job:s}'.format(user=user,job=job)}
  else:
    data = {'SLURM_JOB_ID':job}
  # -- defaults
  if 'workdir'   not in data: data['workdir'  ] = ''
  if 'submitdir' not in data: data['submitdir'] = ''
  # -- store
  jobs += [data]

# check if the supplied jobs are running
for job in jobs:
  if job['SLURM_JOB_ID'] not in running:
    raise IOError('Job-id "%s" is not currently running'%job['SLURM_JOB_ID'])

# remove work directory: check if it exists
if args['--remove']:
  for job in jobs:
    if not os.path.isdir(job['workdir']):
      print('WARNING: "workdir" not found for job "%s"'%job['SLURM_JOB_ID'])

# copy work directory: check if it exists
if args['--copy']:
  for job in jobs:
    if not os.path.isdir(job['submitdir']):
      print('WARNING: "submitdir" not found for job "%s"'%job['SLURM_JOB_ID'])

# no jobs -> quit
if len(jobs) == 0: sys.exit(0)

# ask user for confirmation
# - print message
ids = [job['SLURM_JOB_ID'] for job in jobs]
print('Delete jobs : ')
print(subprocess.check_output('Gstat -j '+' -j '.join(ids),shell=True).decode('utf-8'),end='')
# - prompt response
if not confirm(): sys.exit(1)

# cancel all selected jobs
print(subprocess.check_output('scancel '+' '.join(ids),shell=True).decode('utf-8'),end='')

# copy data
if args['--copy']:
  # - loop over jobs
  for job in jobs:
    # -- check requirements
    if not os.path.isdir(job['workdir']) or not os.path.isdir(job['submitdir']): continue
    # -- wait for the job to quit
    while job['SLURM_JOB_ID'] in getrunningjobs(): time.sleep(3)
    # -- copy
    cmd = 'cp -r %s/* %s/'%(job['workdir'],job['submitdir'])
    print(subprocess.check_output(cmd,shell=True).decode('utf-8'),end='')

# delete data
if args['--remove']:
  # - loop over jobs
  for job in jobs:
    # -- check requirements
    if not os.path.isdir(job['workdir']): continue
    # -- wait for the job to quit
    while job['SLURM_JOB_ID'] in getrunningjobs(): time.sleep(3)
    # -- copy
    shutil.rmtree(job['workdir'])

#!/usr/bin/env python3
'''Gdel
  Delete jobs and optionally copy data from working directory and/or remove it.

Usage:
  Gdel [options]
  Gdel [options] <JobId>...

Arguments:
  ID-number(s) of the job(s) to delete. (default: all user's jobs)

Options:
  -h, --help      Show help.
      --version   Show version.

(c - MIT) T.W.J. de Geus | tom@geus.me | www.geus.me | github.com/tdegeus/GooseSLURM
'''

# ========================================= LOAD LIBRARIES =========================================

import os, sys, re, subprocess, docopt, pwd

# ==================================== RAISE COMMAND LINE ERROR ====================================

def Error(msg,exit_code=1):
  print(msg)
  sys.exit(exit_code)

# ==================================== PROMPT USER CONFIRMATION ====================================

def confirm(message='Proceed [y/n]?\n'):
  while True:
    user = input(message)
    if not user                     : print('Please enter y or n.'); continue
    if user not in ['y','Y','n','N']: print('Please enter y or n.'); continue
    if user     in ['y','Y'        ]: return True
    if user     in ['n','N'        ]: return False

# ============================== GET LIST OF THE USER'S RUNNING JOBS ===============================

def getrunningjobs():

  jobs = subprocess.check_output('squeue --user=`whoami` -o "%A|%t"',shell=True).decode('utf-8')
  jobs = [job for job in jobs.split('\n')[1:]]
  jobs = [job for job in jobs if len(job) > 0]
  stat = [job.split('|')[1].strip() for job in jobs]
  jobs = [job.split('|')[0].strip() for job in jobs]

  out = []

  for job,st in zip(jobs,stat):
    if st in ['R','PD']:
      out += [job]

  return out

# ========================================== MAIN PROGRAM ==========================================

# ---------------------------------- parse command line arguments ----------------------------------

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.4')

# change keys to simplify implementation:
# - remove leading "-" and "--" from options
args = {re.sub(r'([\-]{1,2})(.*)',r'\2',key): args[key] for key in args}
# - change "-" to "_" to facilitate direct use in print format
args = {key.replace('-','_'): args[key] for key in args}
# - remove "<...>"
args = {re.sub(r'(<)(.*)(>)',r'\2',key): args[key] for key in args}

# ------------------------------------- get/check running jobs -------------------------------------

# get the user-name
user = pwd.getpwuid(os.getuid())[0]

# get the currently running jobs (restricted to the current user)
running = getrunningjobs()
# default : select all jobs
if args['JobId']: jobs = args['JobId']
else            : jobs = [job for job in running]

# check if the supplied jobs are running
for job in jobs:
  if job not in running:
    raise Error('Job-id "{job:s}" is not currently running'.format(job=job))

# no jobs -> quit
if len(jobs) == 0: sys.exit(0)

# -------------------------------- prompt confirmation, cancel jobs --------------------------------

# ask user for confirmation
# - print message
ids = [job for job in jobs]
print('Delete jobs : ')
print(subprocess.check_output('Gstat --no-truncate -j '+' -j '.join(ids),shell=True).decode('utf-8'),end='')
# - prompt response
if not confirm(): sys.exit(1)

# cancel all selected jobs
print(subprocess.check_output('scancel '+' '.join(ids),shell=True).decode('utf-8'),end='')

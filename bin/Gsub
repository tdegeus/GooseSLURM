#!/usr/bin/env python3
'''Gsub
  Submit jobs using a script "NAME.slurm" that:

  1. Creates a temporary working directory on the compute-node ("/scratch/USERNAME/JOB-ID")
  2. Copies the input file ("<input-file>")
  3. Runs the command ("cmd %s" % "<input-file>"), the output is written to "NAME.log"
  4. Copies all files in the temporary directory back to the directory of "<input-file>".
  5. Removes the temporary directory.

  N.B.
  - NAME is "<input-file>" without extensions
  - This is an automated script of the "heavy-io.slurm" script.

Usage:
  Gsub [options] --cmd=<str> <input-file>...

Arguments:
  <input-file>    Input file(s)

Options:
  -h --help       Show help.
  --version       Show version.
  --cmd=<str>     The command to execute. You may add "%s" somewhere to have it replaced with
                  "<input-file>", otherwise it will be the last argument.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
'''

# ==================================================================================================

slurm = '''#!/bin/bash
#SBATCH --job-name {name:s}
#SBATCH --out {name:s}.log
#SBATCH --error {name:s}.log
#SBATCH --nodes 1
#SBATCH --ntasks 1
#SBATCH --cpus-per-task 1
#SBATCH --mem 4096
#SBATCH --time 23:59:00

# Generate unique directory name [DO NOT CHANGE]
# ==============================================

# store my username
username=`whoami`

# set the name of the temporary directory on the compute-node
# use job-id to create a unique folder
computedir="/scratch/$username/${{SLURM_JOB_ID}}"

# set the submit directory
submitdir="{path:s}"

# 1. Transfer to node [DO NOT CHANGE]
# ===================================

# create/empty the temporary directory on the compute-node
if [ ! -d "${{computedir}}" ]; then
  mkdir -p "${{computedir}}"
else
  rm -rf "${{computedir}}"/*
fi

# change current directory to the location of the sbatch-command
# (in the home directory on the head-node)
cd "${{submitdir}}"
# copy all files/folders in the directory of the sbatch-command
cp -prf "{input:s}" ${{computedir}}
# change directory to the temporary directory on the compute-node
cd ${{computedir}}

# 2. Execute [MODIFY TO YOUR NEED]
# ================================

STARTTIME=$(date +%s)

{command:s}

ENDTIME=$(date +%s)

echo "Elapsed time (in seconds) : $(($ENDTIME - $STARTTIME))"

# 3. Transfer back to the head-node [DO NOT CHANGE]
# =================================================

# change directory to the location of the sbatch-command (on the head-node)
cd "${{submitdir}}"
# copy everything from the temporary directory on the compute-node
cp -prf "${{computedir}}"/* .
# erase the temporary directory from the compute-node
rm -rf "${{computedir}}"
'''

# ==================================================================================================

import docopt, os, subprocess

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.1')

# rename fields
args['cmd'  ] = args.pop('--cmd')
args['input'] = args.pop('<input-file>')

# if needed, add "%s" format to insert the name of the input file
if len( args['cmd'].split('%s') ) == 1: args['cmd'] += ' %s'

# loop over input files
for file in args['input']:

  # - split the directory from the file name : will run as if from directory of the input-file
  dirname, filename = os.path.split(file)

  # - get the name, for output-file and the job-name
  name   = os.path.splitext(filename)[0]

  # - create file-name for the batch script
  submit = os.path.join(os.path.abspath(dirname), name+'.slurm')

  # - create batch script
  info   = dict(
    path     = os.path.abspath(dirname),
    name     = os.path.join(dirname, name),
    input    = filename,
    command  = args['cmd'] % filename,
  )

  # - write batch script
  open(submit,'w').write(slurm.format(**info))

  # - submit job
  print(subprocess.check_output('sbatch '+submit,shell=True).decode('utf-8'),end='')


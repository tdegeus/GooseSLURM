#!/usr/bin/env python3
'''Gcopy
  Copy data from temporary working directory.

Usage:
  Gcopy [options] JOBS...

Arguments:
  JOBS          Path to the JSON log(s) (see 'Gscript').

Options:
     --remove   Remove temporary working directory after copying.
     --verbose  Verbose all commands and their output.
  -h --help     Show help.
     --version  Show version.

Copyright:
  T.W.J. de Geus
  tom@geus.me
  www.geus.me
'''

# --------------------------------------------------------------------------------------------------

import docopt, os, sys, subprocess, csv, pwd, shutil, time, json

# function to raise error
def Error(txt):
  print(txt)
  sys.exit(1)

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.2')

# loop over jobs
for job in args['JOBS']:

  # - read job info
  if os.path.isfile(job):
    data = json.load(open(job,'r'))
  else:
    Error('Cannot read "%s"'%job)

  # - verify that destination exists
  if not os.path.isdir(data['submitdir']):
    txt = '["{key:s}" ({SLURM_JOB_ID:s})] "submitdir" not found'.format(key=job,**data)
    Error(txt)

  # - find workdir locally
  if os.path.isdir(data['workdir']): local = True
  else                             : local = False

  # - check remote directory
  if not local:

    if int(data['SLURM_JOB_NUM_NODES']) > 1:
      txt = '["{key:s}" ({SLURM_JOB_ID:s})] Automatic copy only possible for 1 compute node'
      txt = txt.format(key=job,**data)
      Error(txt)

    cmd = "if ssh {SLURM_JOB_NODELIST:s} '[ -d {workdir:s} ]'; then echo True; else echo False; fi"
    cmd = cmd.format(**data)
    out = subprocess.check_output(cmd,shell=True).decode('utf-8')

    if args['--verbose']:
      print(cmd)
      print(out)

    if out == 'False':
      txt = '["{key:s}" ({SLURM_JOB_ID:s})] "workdir" not found found'.format(key=job,**data)
      Error(txt)

  # - copy
  if local: cmd = "cp -r {workdir:s}/* {submitdir:s}/".format(**data)
  else    : cmd = "scp -r '{SLURM_JOB_NODELIST:s}:{workdir:s}/*' {submitdir:s}/".format(**data)

  out = subprocess.check_output(cmd,shell=True).decode('utf-8')

  if args['--verbose']:
    print(cmd)
    print(out)

  # - remove if needed
  if args['--remove']:

    if local:
      shutil.rmtree(data['workdir'])
      print('rm -r {workdir:s}'.format(**data))

    else:
      cmd = "ssh {SLURM_JOB_NODELIST:s} 'rm -r {workdir:s}'".format(**data)
      out = subprocess.check_output(cmd,shell=True).decode('utf-8')

      if args['--verbose']:
        print(cmd)
        print(out)

#!/usr/bin/env python3
'''Gcopy
  Copy data from temporary working directory.

Usage:
  Gcopy [options] <job.json>...

Arguments:
  Path to the JSON log(s) (see 'Gscript' and GooseSLURM examples).

Options:
      --remove    Remove temporary working directory after copying.
      --dry-run   Print commands to screen, without executing.
      --verbose   Verbose all commands and their output.
      --debug     Print all operations.
  -h, --help      Show help.
      --version   Show version.

(c - MIT) T.W.J. de Geus | tom@geus.me | www.geus.me | github.com/tdegeus/GooseSLURM
'''

# ========================================= LOAD LIBRARIES =========================================

import os, sys, re, subprocess, shutil, docopt, json

# ==================================== RAISE COMMAND LINE ERROR ====================================

def Error(msg,exit_code=1):
  print(msg)
  sys.exit(exit_code)

# ========================================== RUN COMMAND ===========================================

def run(cmd,verbose=False,dry_run=False,**kwargs):

  if dry_run:
    print(cmd)
    return None

  out = subprocess.check_output(cmd,shell=True).decode('utf-8')

  if verbose:
    print(cmd)
    print(out,end='')

  return out

# ========================================== MAIN PROGRAM ==========================================

# ---------------------------------- parse command line arguments ----------------------------------

# parse command-line options
args = docopt.docopt(__doc__,version='0.0.4')

# change keys to simplify implementation:
# - remove leading "-" and "--" from options
args = {re.sub(r'([\-]{1,2})(.*)',r'\2',key): args[key] for key in args}
# - change "-" to "_" to facilitate direct use in print format
args = {key.replace('-','_'): args[key] for key in args}

# overwrite
if args['debug']: args['verbose'] = True

# ---------------------------------------------- copy ----------------------------------------------

# loop over jobs
for job in args['<job.json>']:

  # read job info
  # -------------

  # read JSON-file
  if os.path.isfile(job):
    data = json.load(open(job,'r'))
  else:
    Error('Cannot read "%s"'%job)

  # verify that destination exists
  if not os.path.isdir(data['submitdir']):
    Error('["{key:s}" ({SLURM_JOB_ID:s})] "submitdir" not found'.format(key=job,**data))

  # check to read the workdir locally
  if data['workdir_host'] == 'localhost': local = True
  else                                  : local = False

  # check remote directory
  if not local:
    # - command
    cmd = "if ssh {workdir_host:s} '[ -d {workdir:s} ]'; then echo True; else echo False; fi"
    cmd = cmd.format(**data)
    # - run command
    out = run(cmd,verbose=args['debug'])
    # - check
    if out == 'False':
      txt = '["{key:s}" ({SLURM_JOB_ID:s})] "workdir" not found found on "{workdir_host:s}"'
      txt = txt.format(key=job,**data)
      Error(txt)

  # copy
  # ----

  # command
  if local: cmd = "cp -r {workdir:s}/* {submitdir:s}/".format(**data)
  else    : cmd = "scp -r '{workdir_host:s}:{workdir:s}/*' {submitdir:s}/".format(**data)

  # run command
  run(cmd,**args)

  # remove (optional)
  # -----------------

  if args['remove']:

    # remove from localhost
    if local:
      # - remove
      if not args['dry_run']: shutil.rmtree(data['workdir'])
      # - verbose output
      if args['verbose'] or args['dry_run']: print('rm -r {workdir:s}'.format(**data))

    # remove from remote host
    else:
      # - command
      cmd = "ssh {workdir_host:s} 'rm -r {workdir:s}'".format(**data)
      # - run command
      run(cmd,**args)
